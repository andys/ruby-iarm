
h2. IARM(Intra-Application Relay Messaging for Ruby): IRC-inspired Messaging Server for Ruby

bc. require 'iarm'

h3. Start a Server:

bc. Iarm::Server.start('drbunix:/tmp/.s.iarm_socket')

h3. Connect, join a channel, say something:

Clients connect to a central server via DRb, join channels, and send
messages to the channel.

bc. c = Iarm::Client.connect('drbunix:/tmp/.s.iarm_socket')
 c.join('nickname', 'channelname')
 c.say('nickname', 'channelname', 'Hello world')

You supply your current nickname to every call, which allows use of multiple
nicks in a session.

h3. Read messages

bc. msg = c.getmsg('nickname', timeout)
puts "Message received #{msg.class}: #{msg.data}
      from: #{msg.from}
      on channel: #{msg.channel}"

As well as regular @Iarm::Msg@ data messages, there are informational types
about the channel, generated by the server: @Join@, @Part@, @Timeout@, and @Topic@.



h2. Features

* Join and depart channels
* Channels exist while there are >0 members
* Get list of channels
* Get list of channel members
* Get/set channel topic
* Auto-notified on join, depart, timeout of other members. Notified on topic changes.
* Messages are any type of marshalable ruby data
* Configurable timeout: messages are saved upon disconnect until timeout
* Poll for messages, or wait for a new message with optional timeout. To  help with refresh loops in web apps, clients can disconnect and reconnect within a configurable timeout, and not lose any messages.  This makes it trivial to implement, say, the back-end of a (poor!) Campfire clone in Rails.
* There is no persistence mechanism
* There is no security except channels may have passwords.  Also, DRb supports SSL (untested).

h3. Contact

Andrew Snow <andrew@modulus.org>
Andys^ on irc.freenode.net

