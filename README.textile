
h2. IARM(Intra-Application Relay Messaging for Ruby)

*ruby-iarm is like an IRC server for ruby apps.*  Clients connect to a
central server via DRb, join channels, and send messages to the channel.

To help with refresh loops in web apps, clients can disconnect and reconnect
within a configurable timeout, and not miss any messages.  This makes it
trivial to implement, say, the back-end of a (poor!) Campfire clone.

There is no persistence mechanism.  There is no security except channels may
have passwords.  Also, DRb supports SSL (untested).


h2. Usage

bc. require 'iarm'

h4. Start a Server:

bc. Iarm::Server.start('drbunix:/tmp/.s.iarm_socket')

h4. Connect, join a channel, say something:

bc. c = Iarm::Client.connect('drbunix:/tmp/.s.iarm_socket')
 c.join('nickname', 'channelname')
 c.say('nickname', 'channelname', 'Hello world')

You supply your current nickname to every call, which allows use of multiple
nicks in a session.

h4. Read messages

bc. msg = c.getmsg('nickname')
 puts "Message received #{msg.class}: #{msg.data}
   from #{msg.from}
   on channel #{msg.channel}"

As well as regular Iarm::Msg data messages, there are informational types
about the channel, generated by the server: Join, Part, and Timeout.

h3. Contact

Andrew Snow <andrew@modulus.org>
Andys^ on irc.freenode.net
